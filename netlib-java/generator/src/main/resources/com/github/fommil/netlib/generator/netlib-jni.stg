/*
 * Copyright (C) 2013 Samuel Halliday
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see [http://www.gnu.org/licenses/].
 */

group netlib-java;

import "netlib-common.stg"
import "netlib-java.stg"

include(files) ::= <<
$files:{f|#include <$f$>};separator="\n"$
>>

function(returns, fqn, init, clean, paramTypes, paramNames, assignReturn, return, params, name) ::= <<
JNIEXPORT $returns$ JNICALL Java_$fqn$ (JNIEnv * env, jobject calling_obj, $params(paramTypes,paramNames)$) {
  $init; separator="\n"$
  $assignReturn$$name$($params;separator=", "$);
  $clean; separator="\n"$
  $return$
}
>>

jni(includes, members) ::= <<
$copyright()$

#include <jni.h>
#include <netlib-jni.h>
$include(includes)$

$members; separator="\n\n"$
>>

array_init(type, name) ::= <<
$type$ * jni_$name$ = NULL;
if ($name$ != NULL) {
  jni_$name$ = (*env)->GetPrimitiveArrayCritical(env, $name$, JNI_FALSE);
  check_memory(env, jni_$name$);
}
>>

array_clean(name) ::= <<
if ($name$ != NULL) {
  (*env)->ReleasePrimitiveArrayCritical(env, $name$, jni_$name$, 0);
}
>>

jdoubleArray_init(name, type="jdouble") ::= "$array_init(type, name)$"
jdoubleArray_clean(name) ::= "$array_clean(name)$"
jfloatArray_init(name, type="jfloat") ::= "$array_init(type, name)$"
jfloatArray_clean(name) ::= "$array_clean(name)$"
jintArray_init(name, type="jint") ::= "$array_init(type, name)$"
jintArray_clean(name) ::= "$array_clean(name)$"

jbooleanArray_init(name) ::= <<
jboolean * jni_$name$_raw = NULL;
jint jni_$name$_size = 0;
int* jni_$name$ = NULL;
if ($name$ != NULL) {
  jni_$name$_raw = (*env)->GetPrimitiveArrayCritical(env, $name$, JNI_FALSE);
  check_memory(env, jni_$name$_raw);
  jni_$name$_size = (*env)->GetArrayLength(env, $name$);
  jni_$name$ = jbooleanArray2intArray(env, jni_$name$_raw, jni_$name$_size);
}
>>

jbooleanArray_clean(name) ::= <<
if ($name$ != NULL) {
  intArray2jbooleanArray(jni_$name$, jni_$name$_raw, jni_$name$_size);
  free(jni_$name$);
  (*env)->ReleasePrimitiveArrayCritical(env, $name$, jni_$name$_raw, 0);
}
>>

jstring_init(name) ::= <<
char * jni_$name$ = (char *)(*env)->GetStringUTFChars(env, $name$, JNI_FALSE);
>>

jstring_clean(name) ::= <<
(*env)->ReleaseStringUTFChars(env, $name$, jni_$name$);
>>

jboolean_init(name) ::= <<
int jni_$name$ = jboolean2int($name$);
>>

jfloatw_init(name) ::= <<
jclass jni_$name$Class = (*env)->GetObjectClass(env, $name$);
jfieldID jni_$name$Id = (*env)->GetFieldID(env, jni_$name$Class, "val", "F");
jfloat jni_$name$ = (*env)->GetFloatField(env, $name$, jni_$name$Id);
>>

jfloatw_clean(name) ::= <<
(*env)->SetFloatField(env, $name$, jni_$name$Id, jni_$name$);
>>

jdoublew_init(name) ::= <<
jclass jni_$name$Class = (*env)->GetObjectClass(env, $name$);
jfieldID jni_$name$Id = (*env)->GetFieldID(env, jni_$name$Class, "val", "D");
jdouble jni_$name$ = (*env)->GetDoubleField(env, $name$, jni_$name$Id);
>>

jdoublew_clean(name) ::= <<
(*env)->SetDoubleField(env, $name$, jni_$name$Id, jni_$name$);
>>

jintw_init(name) ::= <<
jclass jni_$name$Class = (*env)->GetObjectClass(env, $name$);
jfieldID jni_$name$Id = (*env)->GetFieldID(env, jni_$name$Class, "val", "I");
jint jni_$name$ = (*env)->GetIntField(env, $name$, jni_$name$Id);
>>

jintw_clean(name) ::= <<
(*env)->SetIntField(env, $name$, jni_$name$Id, jni_$name$);
>>

jintw_info_init(name) ::= <<
jclass jni_$name$Class = (*env)->GetObjectClass(env, $name$);
jfieldID jni_$name$Id = (*env)->GetFieldID(env, jni_$name$Class, "val", "I");
>>

jintw_info_clean(name) ::= <<
(*env)->SetIntField(env, $name$, jni_$name$Id, returnValue);
>>

jstringw_init(name) ::= <<
jclass jni_$name$Class = (*env)->GetObjectClass(env, $name$);
jfieldID jni_$name$Id = (*env)->GetFieldID(env, jni_$name$Class, "val", "Ljava/lang/String;");
jstring jni_$name$String = (jstring)((*env)->GetObjectField(env, $name$, jni_$name$Id));
char * jni_$name$ = (char *)(*env)->GetStringUTFChars(env, jni_$name$String, JNI_FALSE);
>>

jstringw_clean(name) ::= <<
(*env)->SetObjectField(env, $name$, jni_$name$Id, (*env)->NewStringUTF(env, jni_$name$));
>>

jbooleanw_init(name) ::= <<
jclass jni_$name$Class = (*env)->GetObjectClass(env, $name$);
jfieldID jni_$name$Id = (*env)->GetFieldID(env, jni_$name$Class, "val", "Z");
jboolean jni_$name$_raw = (*env)->GetBooleanField(env, $name$, jni_$name$Id);
int jni_$name$ = jboolean2int(jni_$name$_raw);
>>

jbooleanw_clean(name) ::= <<
jni_$name$_raw = int2jboolean(jni_$name$);
(*env)->SetIntField(env, $name$, jni_$name$Id, jni_$name$_raw);
>>
