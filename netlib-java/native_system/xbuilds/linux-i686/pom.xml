<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.github.fommil.netlib</groupId>
        <artifactId>native_system-xbuilds</artifactId>
        <version>1.2-SNAPSHOT</version>
    </parent>

    <artifactId>netlib-native_system-linux-i686</artifactId>
    <packaging>so</packaging>

    <!--
    To build for Linux i686 on an x86_64 architecture:

      sudo apt-get install libc6-dev-i386 gfortran-multilib

    Get the 32 bit Open JDK (e.g., Zulu) and install into

      /opt/linux-i686/jdk8
        
    and execute download_i686_libraries.sh.

    It is impossible to compile a library on Ubuntu that has static
    references to the fortran libraries, as the static fortran library
    has not been compiled with -fPIC. The only workaround would be
    to compile gcc from scratch, with the flags added, and then compile
    these natives. That is not a wise move.
        
    NOTE: on some Ubuntu systems, the libblas.so.3 and liblapack.so.3
        don't always exist. So you need to create them against the
        sudo ln -s libblas.so /usr/lib/libblas.so.3
        sudo ln -s liblapack.so /usr/lib/liblapack.so.3
    -->
    <properties>
        <netlib.src>../../../netlib</netlib.src>
    </properties>

    <dependencies>
        <dependency>
            <groupId>${project.parent.groupId}</groupId>
            <artifactId>native_system-java</artifactId>
            <version>${project.parent.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>com.github.fommil.netlib</groupId>
                <artifactId>generator</artifactId>
                <executions>
                    <execution>
                        <id>blas</id>
                    </execution>
                    <execution>
                        <id>lapack</id>
                    </execution>
                    <execution>
                        <id>arpack</id>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>native-maven-plugin</artifactId>
                <extensions>true</extensions>
                <configuration>
                    <javahOS>linux</javahOS>
                    <jdkIncludePath>/opt/linux-i686/jdk8/include</jdkIncludePath>
                    <compilerEndOptions>
                        <compilerEndOption>-m32</compilerEndOption>
                        <compilerEndOption>-I/opt/linux-i686/usr/include/i386-linux-gnu/</compilerEndOption>
                    </compilerEndOptions>
                    <linkerEndOptions>
                        <linkerEndOption>-m32</linkerEndOption>
                    </linkerEndOptions>
                    <linkerMiddleOptions>
                        <linkerMiddleOption>-L/opt/linux-i686/usr/lib/i386-linux-gnu/blas/</linkerMiddleOption>
                        <linkerMiddleOption>-L/opt/linux-i686/usr/lib/i386-linux-gnu/lapack/</linkerMiddleOption>
                        <linkerMiddleOption>-shared</linkerMiddleOption>
                        <linkerMiddleOption>-lgfortran</linkerMiddleOption>
                        <linkerMiddleOption>-lblas</linkerMiddleOption>
                        <linkerMiddleOption>-llapack</linkerMiddleOption>
                        <linkerMiddleOption>-Wl,-s</linkerMiddleOption>
                        <linkerMiddleOption>-Wl,--version-script=${netlib.src}/symbol.map</linkerMiddleOption>
                        <linkerMiddleOption>-Wl,--gc-sections</linkerMiddleOption>
                    </linkerMiddleOptions>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <id>runtime</id>
                    </execution>
                    <execution>
                        <id>source</id>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
